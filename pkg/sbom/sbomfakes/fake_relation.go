// Code generated by counterfeiter. DO NOT EDIT.
package sbomfakes

import (
	"sync"

	"github.com/interlynk-io/sbomqs/pkg/sbom"
)

type FakeRelation struct {
	FromStub        func() string
	fromMutex       sync.RWMutex
	fromArgsForCall []struct {
	}
	fromReturns struct {
		result1 string
	}
	fromReturnsOnCall map[int]struct {
		result1 string
	}
	ToStub        func() string
	toMutex       sync.RWMutex
	toArgsForCall []struct {
	}
	toReturns struct {
		result1 string
	}
	toReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRelation) From() string {
	fake.fromMutex.Lock()
	ret, specificReturn := fake.fromReturnsOnCall[len(fake.fromArgsForCall)]
	fake.fromArgsForCall = append(fake.fromArgsForCall, struct {
	}{})
	stub := fake.FromStub
	fakeReturns := fake.fromReturns
	fake.recordInvocation("From", []interface{}{})
	fake.fromMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRelation) FromCallCount() int {
	fake.fromMutex.RLock()
	defer fake.fromMutex.RUnlock()
	return len(fake.fromArgsForCall)
}

func (fake *FakeRelation) FromCalls(stub func() string) {
	fake.fromMutex.Lock()
	defer fake.fromMutex.Unlock()
	fake.FromStub = stub
}

func (fake *FakeRelation) FromReturns(result1 string) {
	fake.fromMutex.Lock()
	defer fake.fromMutex.Unlock()
	fake.FromStub = nil
	fake.fromReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRelation) FromReturnsOnCall(i int, result1 string) {
	fake.fromMutex.Lock()
	defer fake.fromMutex.Unlock()
	fake.FromStub = nil
	if fake.fromReturnsOnCall == nil {
		fake.fromReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.fromReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeRelation) To() string {
	fake.toMutex.Lock()
	ret, specificReturn := fake.toReturnsOnCall[len(fake.toArgsForCall)]
	fake.toArgsForCall = append(fake.toArgsForCall, struct {
	}{})
	stub := fake.ToStub
	fakeReturns := fake.toReturns
	fake.recordInvocation("To", []interface{}{})
	fake.toMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRelation) ToCallCount() int {
	fake.toMutex.RLock()
	defer fake.toMutex.RUnlock()
	return len(fake.toArgsForCall)
}

func (fake *FakeRelation) ToCalls(stub func() string) {
	fake.toMutex.Lock()
	defer fake.toMutex.Unlock()
	fake.ToStub = stub
}

func (fake *FakeRelation) ToReturns(result1 string) {
	fake.toMutex.Lock()
	defer fake.toMutex.Unlock()
	fake.ToStub = nil
	fake.toReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRelation) ToReturnsOnCall(i int, result1 string) {
	fake.toMutex.Lock()
	defer fake.toMutex.Unlock()
	fake.ToStub = nil
	if fake.toReturnsOnCall == nil {
		fake.toReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.toReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeRelation) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fromMutex.RLock()
	defer fake.fromMutex.RUnlock()
	fake.toMutex.RLock()
	defer fake.toMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRelation) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sbom.Relation = new(FakeRelation)
